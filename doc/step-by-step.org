* Creating a To Do list with the Sping Framework


** Overview

This is not a full step by step tutorial, but some notes that could
one day be expanded to be a tutorial.  So it should be complete, but
also fast to write and probably terse.

Starting with a empty pivotal tracker project with stories and such,
we build a simple To Do list app in Spring Framework + MVC, using
spring boot and AngularJS for the front end.

* Starting the project

** commit 9b8e26267780faff87e6313db3c462965d3a916e
- Github project on https://github.com/dirkjot/springdo.git
- Cleaned up tracker project and stored it in a csv file (not on
  github yet)
- Started spring boot via http://start.spring.io
- `gradle wrapper`



** commit 2c695d6db9ce111298744a1d51aea8f0f3b33a64
- `gradle idea`   , this sets up the intellij project for you.
- `idea . ` (from project directory)
- added the spring facet to the top module
- we are now using eclipse?? settings which means the project does not
  go into the `.idea` directory
- similary, build does not only go into `build` but also into `out`.
- this compiles and runs, showing an generic whitepage error on localhost:8080/
- create a run/debug configuration by right clicking on the
  spriongdoApplication.java file and choosing run, then choose the
  option with the green leaf icon (spring).   See screenshot.



** commit bea91975d47397339ef5a3e655ca1b2378c5a941

we pulled in angular + bootstrap.   following advice  from spriong
tutorial #2 (refer here),  we created our own js/css main file.   this
used wro4j in some intricate way, see springbeachproject. essentially,
it combines and minifies all js/css.

** commit ce2df0ddda289dc1c5d33b6445fe20bc80f39d42

fixed the first user story, but at json level only.  ie / returns a
json array of two todo items. 

** commit 2285a53a1a0267e14078c0553f5c41ef3ffed4f2

added some simple angular structure to iterate over the list of todo
items (using ng-repeat).  Move the json to `/resource/` . 

** commit 4c90cc917465c03c649ce0c709a8f309261c87a8

created a link with github as follows:
- go to your profile page on tracker
- find api key (long hex number)
- go to github, project setttings, webhooks and services
- under services, choose pivotal tracker and enter api key.  


** commit 4e11bb268d0fa0d4fbc005d300520c1218313fa6

- added checkboxes to UI as requested by story
- factored placeholder data to be created on application boot. 
- Created Item model and added checkboxes. 
- Selection of checkboxes is posted to the controller and persisted.
- found out how to do db init at startup, see snippet below


** commit 0a69691b627761b56237bc4bb7ac7b9b57d62706
    
Added some simple formatting to make it look nicer.  There is code in
index.html (commented out) which allows you to test the main page by
itself, without a server.


** TODO working on show/hide content


what we learned about angular:
- in angular, things can be hidden/shown and toggled with ng-show and
  ng-hide directives, these can go on anything (like a <dt> in our
  case) :  <dt ng-show="toggle[item.id]"
- the ng-show has an argument which is the model variable on which it
  will show, var == true -> tag shows
- the argument is normally a variable, but can also be an array.  we
  have multiple todo items and only one toggle function, so we use an
  array with the item.id
- inside the ng.show, you do not need the {{item.id}} or $scope.
- we do need to set up the toggle array in our model (index.js):
  $scope.toggle = [];
- all array items are undefined at first, but that is fine if we want
  our item hidden: ng-show(undefined) will make things hidden.
- to toggle, we need a test that sets undefined and false to true, and
  true to false: $scope.toggle[myvar] = $scope.toggle[myvar] === true
  ? false : true;};
- the state change is started by a click on the title, you can connect
  an ng-click to ANY item (does not have to be button).
  <dt ng-click="toggleCustom(item.id)">Our ToDo title here</dt>


- stored the front end business in https://jsfiddle.net/t1q5x5g8/


*** docs used:
https://docs.angularjs.org/api/ng/directive/ngShow
http://geniuscarrier.com/ng-toggle-in-angularjs/



** TODO user edits text fields

*** design

we decided to go for an edit button , as a click on the text is nice,
but doesn't work for the title (already a collapse action).  we may
add a shortcut to edity by click on content later.

added edit and trash buttons from font awesome.

stored in jsfiddle: https://jsfiddle.net/65wbya5L/

we bolded all the item titles and removed the id numbers (dev only).
We decided against angular magic to make only the title of the
currently open todo item bold. 

The html page has become quite complex:  Each item has two forms, one
for the not-editing state (with only a checkbox as a form element) and
one for editing the title and content, with an additional edit
button. Each item has these forms, so there are a lot of forms open at
the same time.  

Each form has its own id, made up of 'form'+item.id (or 'editform').
Each of the forms points to its own model in a big array,
titleField[item.id] and contentField[item.id].  This is in addition to
a item specific toggleContent state.  These three arrays could be
avoided by treating all items as objects, with item.contentField etc. 

The editing form field could have been written much simpler by
writing: 
: <input type="text" ng-model="item.title" class="form-control">
Angular will 'live' update the item.title variable as the user is
typing, and there is no need to copy values back and forth.  However,
the drawback of this method is that you cannot undo your edits. Even
though we do not have a Cancel button in the original design, we felt
that clicking away (ie clicking on the title of another todo item),
should cancel the edit. 
To do that, we need to either  save the old value, or run the input
box on another variable.  
 

*** docs used

http://icelab.com.au/articles/click-to-edit-with-angularjs/




**  screenshots

project structure settings
[[./screenshots/project-structure-settings-1.png]]

run/debug configuration 
[[./screenshots/run-debug-config-1.png]]


* things to remember /snippets

** to run commands right after boot startup

make your app extend 'commandlinerunner' and then override the run method:

package io.pivotal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringdoApplication implements CommandLineRunner {

    
    @Autowired
    ItemRepository itemRepository;
    
    public static void main(String[] args) {
        SpringApplication.run(SpringdoApplication.class, args);
    }

    @Override
    public void run(String... strings) throws Exception {
        // save a couple of customers
        itemRepository.save(new Item("Jack", "Bauer"));
        itemRepository.save(new Item("Chloe", "O'Brian"));
        itemRepository.save(new Item("Kim", "Bauer"));
        itemRepository.save(new Item("David", "Palmer"));
        itemRepository.save(new Item("Michelle", "Dessler"));
    }

}






** to convert an iterable (also an iterator) to a list

in java 8 , you can use a lambda and some good functional syntax:

Iterable<Item> iterable = itemRepository.findAll();
List<Item> result = new ArrayList<>();
iterable.iterator().forEachRemaining(result::add);

- the first line creates an iterable (abstract), which will be
  'instantiated' to an iterator in line 3
- the second line creates an empty list of the right type 
- the third line maps the add function of the empty list to each item
  of the iterator.
- voila
